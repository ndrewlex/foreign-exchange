{"version":3,"sources":["components/currency-exchange/base.tsx","stores/index.tsx","utils/config.tsx","components/currency-exchange/item.tsx","components/currency-exchange/list.tsx","components/currency-exchange/action.tsx","components/currency-exchange/index.tsx","serviceWorker.ts","index.tsx"],"names":["Base","currency","value","onChange","Card","Content","Meta","className","Header","Input","size","placeholder","defaultValue","type","CurrencyContainer","createContainer","useState","baseValue","setBaseValue","allRates","setAllRates","loading","setLoading","listData","setListData","options","setOptions","selectedOption","setSelectedOption","onFetchData","a","fetchAllCurrencyRates","response","allCurrencyRates","mapCurrencyRates","map","item","key","text","slice","console","log","array","rates","push","rate","fetch","json","Promise","resolve","reject","onAddList","event","preventDefault","find","filterOptions","data","filter","includes","baseCurrency","onChangeBaseValue","onDeleteList","index","copyOfListData","splice","onChangeOption","selectedRate","onAddMoreCurrency","DeleteContainer","styled","div","Item","details","onDelete","Grid","celled","Row","Column","width","Intl","NumberFormat","format","code","onClick","e","CardContainer","List","useContainer","Fragment","length","extra","Action","Button","Icon","name","columns","mobile","tablet","computer","Dropdown","fluid","search","selection","stretched","Loading","CurrencyExchange","useEffect","verticalAlign","CurrencyExchangeContainer","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2619e385.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, Input, Header } from \"semantic-ui-react\";\r\n\r\nconst Base = ({ currency, value, onChange }: any) => {\r\n  return (\r\n    <Card.Content>\r\n      <Card.Meta>\r\n        <div className=\"black bold\">USD - United States Dollar</div>\r\n      </Card.Meta>\r\n      <Card.Header>\r\n        <div className=\"row-between\">\r\n          <div>\r\n            <Header>{currency}</Header>\r\n          </div>\r\n          <div>\r\n            <Input\r\n              size=\"mini\"\r\n              placeholder=\"Value...\"\r\n              defaultValue={value}\r\n              onChange={onChange}\r\n              type=\"number\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Card.Header>\r\n    </Card.Content>\r\n  );\r\n};\r\n\r\nexport default Base;\r\n","import { useState, ChangeEvent, SyntheticEvent } from \"react\";\r\nimport { createContainer } from \"unstated-next\";\r\nimport { ExchangeRatesApi } from \"../utils/config\";\r\n\r\nconst useCurrency = () => {\r\n  const baseCurrency = \"USD\";\r\n  const supportCurrency = \"CAD,IDR,GBP,CHF,SGD,INR,MYR,JPY,KRW\"; //only this currency can be added\r\n  const [baseValue, setBaseValue] = useState<any>(\"10.00\"); //default base currency value\r\n  const [allRates, setAllRates] = useState<any>([]);\r\n  const [loading, setLoading] = useState<any>(true);\r\n  const [listData, setListData] = useState<any>([]);\r\n  const [options, setOptions] = useState<any>([]);\r\n  const [selectedOption, setSelectedOption] = useState<any>(null);\r\n\r\n  const onFetchData = async () => {\r\n    try {\r\n      const response = await fetchAllCurrencyRates();\r\n      const allCurrencyRates = mapCurrencyRates(response);\r\n      setAllRates(allCurrencyRates);\r\n      setOptions(\r\n        allCurrencyRates.map((item: any) => {\r\n          return {\r\n            key: item.currency,\r\n            value: item.currency,\r\n            text: item.currency\r\n          };\r\n        })\r\n      );\r\n      setListData(allCurrencyRates.slice(0, 4)); //add default data to list\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const mapCurrencyRates = (response: any) => {\r\n    let array: any = [];\r\n    for (let currency in response.rates) {\r\n      array.push({\r\n        currency,\r\n        rate: response.rates[currency]\r\n      });\r\n    }\r\n    return array;\r\n  };\r\n\r\n  const fetchAllCurrencyRates = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `${ExchangeRatesApi}/latest?base=${baseCurrency}&symbols=${supportCurrency}`\r\n      );\r\n      const json = await response.json();\r\n      return Promise.resolve(json);\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n  };\r\n\r\n  const onChangeBaseValue = (event: ChangeEvent, data: any) => {\r\n    event.preventDefault();\r\n    setBaseValue(data.value);\r\n  };\r\n\r\n  const onChangeOption = (event: SyntheticEvent, data: any) => {\r\n    event.preventDefault();\r\n    const selectedRate = allRates.find(\r\n      (item: any) => item.currency === data.value\r\n    );\r\n    if (selectedRate) {\r\n      setSelectedOption(selectedRate);\r\n    }\r\n  };\r\n\r\n  const onAddList = async (event: SyntheticEvent) => {\r\n    event.preventDefault();\r\n    const isExist = listData.find((item: any) => {\r\n      return item.currency === selectedOption.currency;\r\n    });\r\n    if (!isExist && selectedOption !== null) {\r\n      setListData([...listData, selectedOption]);\r\n      filterOptions([...listData, selectedOption]);\r\n      setSelectedOption(null);\r\n    }\r\n  };\r\n\r\n  const onDeleteList = (event: any, index: any) => {\r\n    event.preventDefault();\r\n    let copyOfListData = listData;\r\n    copyOfListData.splice(index, 1);\r\n    filterOptions(copyOfListData);\r\n    setListData([...copyOfListData]);\r\n    setSelectedOption(null);\r\n  };\r\n\r\n  const onAddMoreCurrency = (event: SyntheticEvent) => {\r\n    event.preventDefault();\r\n    filterOptions(listData);\r\n  };\r\n\r\n  //filterOptions to prevent added duplicate currency in list\r\n  const filterOptions = (listData: any) => {\r\n    const data = allRates.filter((item: any) => !listData.includes(item));\r\n    setOptions(\r\n      data.map((item: any) => {\r\n        return {\r\n          key: item.currency,\r\n          value: item.currency,\r\n          text: item.currency\r\n        };\r\n      })\r\n    );\r\n    setSelectedOption(data[0]);\r\n  };\r\n\r\n  return {\r\n    //global state\r\n    loading,\r\n    baseCurrency,\r\n    baseValue,\r\n    listData,\r\n    options,\r\n    selectedOption,\r\n\r\n    //global function\r\n    onFetchData,\r\n    onChangeBaseValue,\r\n    onAddList,\r\n    onDeleteList,\r\n    onChangeOption,\r\n    onAddMoreCurrency\r\n  };\r\n};\r\n\r\nexport const CurrencyContainer = createContainer(useCurrency);\r\n","export const ExchangeRatesApi = \"https://api.exchangeratesapi.io\";\r\n","import React from \"react\";\r\nimport { Header, Grid } from \"semantic-ui-react\";\r\nimport { FaMinusCircle } from \"react-icons/fa\";\r\nimport { code } from \"currency-codes\";\r\nimport styled from \"styled-components\";\r\n\r\nconst DeleteContainer = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  svg {\r\n    font-size: 26px;\r\n    margin: auto;\r\n  }\r\n`;\r\n\r\nconst Item = ({ details, baseCurrency, baseValue, onDelete, index }: any) => {\r\n  return (\r\n    <Grid celled>\r\n      <Grid.Row>\r\n        <Grid.Column width={13}>\r\n          <div className=\"row-between\">\r\n            <div>\r\n              <Header>{details.currency}</Header>\r\n            </div>\r\n            <div>\r\n              <Header>\r\n                {new Intl.NumberFormat(\"de-ID\").format(\r\n                  baseValue * details.rate\r\n                )}\r\n              </Header>\r\n            </div>\r\n          </div>\r\n          <div className=\"black bold italic\">\r\n            <p>\r\n              {details.currency} - {code(details.currency).currency}\r\n            </p>\r\n          </div>\r\n          <div className=\"bold\">\r\n            <p>\r\n              1 {baseCurrency} = {details.currency}{\" \"}\r\n              {new Intl.NumberFormat(\"de-ID\").format(details.rate)}\r\n            </p>\r\n          </div>\r\n        </Grid.Column>\r\n        <Grid.Column width={3}>\r\n          <DeleteContainer>\r\n            <FaMinusCircle onClick={(e: any) => onDelete(e, index)} />\r\n          </DeleteContainer>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","import React from \"react\";\r\nimport { Card } from \"semantic-ui-react\";\r\nimport { CurrencyContainer } from \"../../stores/index\";\r\nimport Item from \"./item\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CardContainer = styled.div`\r\n  padding: 0 0.5rem;\r\n`;\r\n\r\nconst List = () => {\r\n  const {\r\n    baseValue,\r\n    listData,\r\n    onDeleteList,\r\n    baseCurrency\r\n  } = CurrencyContainer.useContainer();\r\n  return (\r\n    <React.Fragment>\r\n      {listData.length > 0 && (\r\n        <Card.Content extra>\r\n          {listData.map((item: any, index: any) => {\r\n            return (\r\n              <CardContainer key={index}>\r\n                <Item\r\n                  details={item}\r\n                  baseCurrency={baseCurrency}\r\n                  baseValue={baseValue}\r\n                  onDelete={(e: any) => onDeleteList(e, index)}\r\n                />\r\n              </CardContainer>\r\n            );\r\n          })}\r\n        </Card.Content>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport { Card, Dropdown, Button, Icon, Grid } from \"semantic-ui-react\";\r\nimport { CurrencyContainer } from \"../../stores/index\";\r\n\r\nconst Action = () => {\r\n  const {\r\n    options,\r\n    onChangeOption,\r\n    onAddList,\r\n    selectedOption,\r\n    onAddMoreCurrency\r\n  } = CurrencyContainer.useContainer();\r\n  return (\r\n    <React.Fragment>\r\n      {options.length !== 0 && (\r\n        <Card.Content extra>\r\n          {selectedOption === null ? (\r\n            <Button onClick={onAddMoreCurrency} size=\"large\">\r\n              <Icon name=\"plus square\" />\r\n              Add More Currency\r\n            </Button>\r\n          ) : (\r\n            <Grid columns={2}>\r\n              <Grid.Column mobile={10} tablet={10} computer={10}>\r\n                <Dropdown\r\n                  placeholder=\"Select currency\"\r\n                  fluid\r\n                  search\r\n                  selection\r\n                  defaultValue={selectedOption.currency}\r\n                  options={options}\r\n                  onChange={onChangeOption}\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column mobile={6} tablet={6} computer={6} stretched>\r\n                <Button onClick={onAddList}>Submit</Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n          )}\r\n        </Card.Content>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Action;\r\n","import React, { useEffect, FunctionComponent } from \"react\";\r\nimport { Card, Grid } from \"semantic-ui-react\";\r\nimport Base from \"./base\";\r\nimport List from \"./list\";\r\nimport Action from \"./action\";\r\nimport { CurrencyContainer } from \"../../stores/index\";\r\n\r\ninterface ICurrencyExchange {}\r\n\r\nconst CurrencyExchangeContainer: FunctionComponent = () => {\r\n  return (\r\n    <CurrencyContainer.Provider>\r\n      <CurrencyExchange />\r\n    </CurrencyContainer.Provider>\r\n  );\r\n};\r\n\r\nconst Loading = () => {\r\n  return <Card.Content>Loading...</Card.Content>;\r\n};\r\n\r\nconst CurrencyExchange: FunctionComponent<ICurrencyExchange> = () => {\r\n  const {\r\n    baseValue,\r\n    onFetchData,\r\n    onChangeBaseValue,\r\n    baseCurrency,\r\n    loading\r\n  } = CurrencyContainer.useContainer();\r\n\r\n  useEffect(() => {\r\n    onFetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <Grid verticalAlign=\"middle\" columns={3}>\r\n      <Grid.Column mobile={16} tablet={8} computer={6}>\r\n        <Card fluid>\r\n          <Base\r\n            currency={baseCurrency}\r\n            value={baseValue}\r\n            onChange={onChangeBaseValue}\r\n          />\r\n          {loading && <Loading />}\r\n          <React.Fragment>\r\n            <List />\r\n            <Action />\r\n          </React.Fragment>\r\n        </Card>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CurrencyExchangeContainer;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { FunctionComponent } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport CurrencyExchange from \"./components/currency-exchange/\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst App: FunctionComponent = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <CurrencyExchange />\r\n    </div>\r\n  );\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}