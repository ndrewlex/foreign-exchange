{"version":3,"sources":["views/currency-exchange/base.tsx","views/currency-exchange/item.tsx","views/currency-exchange/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Base","currency","value","onChange","Card","Content","Meta","Header","className","Input","size","placeholder","defaultValue","Item","baseCurrency","baseValue","rate","Intl","NumberFormat","format","code","DeleteContainer","styled","div","CardContainer","data","CurrencyExchange","useState","setBaseValue","loading","setLoading","allRates","setAllRates","visibleRates","setVisibleRates","dropDownData","setDropDownData","newRate","setNewRate","fetchData","a","fetch","response","json","allRatesMapped","dropDownMapped","rates","push","key","text","slice","console","log","useEffect","Grid","centered","verticalAlign","columns","Column","mobile","tablet","computer","fluid","event","preventDefault","extra","map","item","index","celled","Row","width","onClick","e","copyOfVisibleRates","splice","onDeleteRate","Dropdown","search","selection","options","selectedRate","find","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2VAsBeA,EAnBF,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,SAC/B,OACE,kBAACC,EAAA,EAAKC,QAAN,KACE,kBAACD,EAAA,EAAKE,KAAN,mCACA,kBAACF,EAAA,EAAKG,OAAN,KACE,yBAAKC,UAAU,eACb,6BAAMP,GACN,kBAACQ,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,WACZC,aAAcV,EACdC,SAAUA,Q,kBCkCPU,EA1CF,SAAC,GAAsD,IAApDZ,EAAmD,EAAnDA,SAAUa,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,KACjD,OAmBE,oCACE,yBAAKR,UAAU,eACb,6BACE,kBAACD,EAAA,EAAD,KAASN,IAEX,6BACE,kBAACM,EAAA,EAAD,KACG,IAAIU,KAAKC,aAAa,SAASC,OAAOJ,EAAYC,MAIzD,2BACGf,EADH,MACgBmB,eAAKnB,GAAUA,UAE/B,gCACKa,EADL,MACsBb,EAAU,IAC7B,IAAIgB,KAAKC,aAAa,SAASC,OAAOH,M,mSCjB/C,IAAMK,EAAkBC,IAAOC,IAAV,KAUfC,EAAgBF,IAAOC,IAAV,KAIbE,EACU,MAgJDC,EA7IgD,WAAO,IAAD,EACjCC,mBAAS,SADwB,mBAC5DZ,EAD4D,KACjDa,EADiD,OAErCD,oBAAS,GAF4B,mBAE5DE,EAF4D,KAEnDC,EAFmD,OAGnCH,mBAAS,IAH0B,mBAG5DI,EAH4D,KAGlDC,EAHkD,OAI3BL,mBAAc,IAJa,mBAI5DM,EAJ4D,KAI9CC,EAJ8C,OAK3BP,mBAAc,IALa,mBAK5DQ,EAL4D,KAK9CC,EAL8C,OAMrCT,mBAAc,MANuB,mBAM5DU,EAN4D,KAMnDC,EANmD,KAQ7DC,EAAS,sCAAG,oCAAAC,EAAA,2DACH,MACG,sCAFA,kBAISC,MAAM,+CAAD,OAHjB,MAGiB,oBAFd,wCAFA,cAIRC,EAJQ,gBAOKA,EAASC,OAPd,OAUd,IAAS1C,KAHH0C,EAPQ,OAQVC,EAAsB,GACtBC,EAAsB,GACLF,EAAKG,MACxBF,EAAeG,KAAK,CAClB9C,WACAe,KAAM2B,EAAKG,MAAM7C,KAEnB4C,EAAeE,KAAK,CAClBC,IAAK/C,EACLC,MAAOD,EACPgD,KAAMhD,IAGV+B,EAAYY,GACZR,EAAgBS,GAChBX,EAAgBU,EAAeM,MAAM,EAAG,IAvB1B,kDAyBdC,QAAQC,IAAI,SAzBE,QA2BhBtB,GAAW,GA3BK,wDAAH,qDA8BfuB,oBAAU,WACRd,KACC,IAyCH,OAJAc,oBAAU,WACRF,QAAQC,IAAI,CAAEnB,kBACb,CAACA,IAGF,kBAACqB,EAAA,EAAD,CAAMC,UAAQ,EAACC,cAAc,SAASC,QAAS,GAC7C,kBAACH,EAAA,EAAKI,OAAN,CAAaC,OAAQ,GAAIC,OAAQ,EAAGC,SAAU,GAC5C,kBAACzD,EAAA,EAAD,CAAM0D,OAAK,GACT,kBAAC,EAAD,CACE7D,SAAUwB,EACVvB,MAAOa,EACPZ,SA9CY,SAAC4D,EAAoBtC,GACzCsC,EAAMC,iBACNpC,EAAaH,EAAKvB,UA8CZ,kBAACE,EAAA,EAAKC,QAAN,CAAc4D,OAAK,GACfpC,EA4BA,2CA3BAI,EAAaiC,IAAI,SAACC,EAAWC,GAC3B,OACE,kBAAC5C,EAAD,KACE,kBAAC8B,EAAA,EAAD,CAAMe,QAAM,GACV,kBAACf,EAAA,EAAKgB,IAAN,KACE,kBAAChB,EAAA,EAAKI,OAAN,CAAaa,MAAO,IAClB,kBAAC,EAAD,CACEvB,IAAKoB,EACLnE,SAAUkE,EAAKlE,SACfe,KAAMmD,EAAKnD,KACXF,aAAcW,EACdV,UAAWA,KAGf,kBAACuC,EAAA,EAAKI,OAAN,CAAaa,MAAO,GAClB,kBAAClD,EAAD,KACE,kBAAC,IAAD,CACEmD,QAAS,SAACC,GAAD,OAxChB,SAACV,EAAYK,GAChCL,EAAMC,iBACN,IAAIU,EAAqBzC,EACzByC,EAAmBC,OAAOP,EAAO,GACjCjB,QAAQC,IAAI,CAAEsB,uBACdxC,EAAgB,YAAIwC,IAmC2BE,CAAaH,EAAGL,cAazD,kBAAChE,EAAA,EAAKC,QAAN,CAAc4D,OAAK,GACjB,yBAAKzD,UAAU,eACb,kBAACqE,EAAA,EAAD,CACElE,YAAY,kBACZmD,OAAK,EACLgB,QAAM,EACNC,WAAS,EACTC,QAAS7C,EACThC,SAnFU,SAAC4D,EAAuBtC,GAC9CsC,EAAMC,iBACN,IAAMiB,EAAelD,EAASmD,KAC5B,SAACf,GAAD,OAAeA,EAAKlE,WAAawB,EAAKvB,QAEpC+E,GACF3C,EAAW2C,MA+EH,kBAACE,EAAA,EAAD,CAAQX,QA3EF,SAACT,IACjBA,EAAMC,iBACS,MAAX3B,MACcJ,EAAaiD,KAAK,SAACf,GACjC,OAAOA,EAAKlE,WAAaoC,EAAQpC,YAGrB,OAAZoC,GACAH,EAAgB,GAAD,mBAAKD,GAAL,CAAmBI,QAmE5B,aCnKC+C,G,OARgB,WAC7B,OACE,yBAAK5E,UAAU,OACb,kBAAC,EAAD,S,OCKc6E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.dda1d4cc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, Input } from \"semantic-ui-react\";\r\n\r\nconst Base = ({ currency, value, onChange }: any) => {\r\n  return (\r\n    <Card.Content>\r\n      <Card.Meta>USD - United States Dollar</Card.Meta>\r\n      <Card.Header>\r\n        <div className=\"row-between\">\r\n          <div>{currency}</div>\r\n          <Input\r\n            size=\"mini\"\r\n            placeholder=\"Value...\"\r\n            defaultValue={value}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n      </Card.Header>\r\n    </Card.Content>\r\n  );\r\n};\r\n\r\nexport default Base;\r\n","import React from \"react\";\r\nimport { Card, Grid, Form, Header } from \"semantic-ui-react\";\r\nimport { code } from \"currency-codes\";\r\nimport styled from \"styled-components\";\r\nimport { FaMinusCircle } from \"react-icons/fa\";\r\n\r\nconst Item = ({ currency, baseCurrency, baseValue, rate }: any) => {\r\n  return (\r\n    // <Card fluid>\r\n    //   <Card.Content>\r\n    //     <Card.Header>\r\n    //       <div className=\"row-between\">\r\n    //         <div>{currency}</div>\r\n    //         <div>{new Intl.NumberFormat(\"de-ID\").format(baseValue * rate)}</div>\r\n    //       </div>\r\n    //     </Card.Header>\r\n    //     <Card.Meta>\r\n    //       {currency} - {code(currency).currency}\r\n    //     </Card.Meta>\r\n    //     <Card.Meta>\r\n    //       1 {baseCurrency} = {currency}{\" \"}\r\n    //       {new Intl.NumberFormat(\"de-ID\").format(rate)}\r\n    //     </Card.Meta>\r\n    //   </Card.Content>\r\n    // </Card>\r\n\r\n    <>\r\n      <div className=\"row-between\">\r\n        <div>\r\n          <Header>{currency}</Header>\r\n        </div>\r\n        <div>\r\n          <Header>\r\n            {new Intl.NumberFormat(\"de-ID\").format(baseValue * rate)}\r\n          </Header>\r\n        </div>\r\n      </div>\r\n      <p>\r\n        {currency} - {code(currency).currency}\r\n      </p>\r\n      <p>\r\n        1 {baseCurrency} = {currency}{\" \"}\r\n        {new Intl.NumberFormat(\"de-ID\").format(rate)}\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","import React, {\r\n  useState,\r\n  useEffect,\r\n  FunctionComponent,\r\n  ChangeEvent,\r\n  SyntheticEvent\r\n} from \"react\";\r\nimport {\r\n  Card,\r\n  Dropdown,\r\n  Button,\r\n  Form,\r\n  Grid,\r\n  Segment,\r\n  Image,\r\n  Container,\r\n  GridColumn\r\n} from \"semantic-ui-react\";\r\nimport styled from \"styled-components\";\r\nimport Base from \"./base\";\r\nimport Item from \"./item\";\r\nimport { FaMinusCircle } from \"react-icons/fa\";\r\n\r\ninterface ICurrencyExchange {}\r\n\r\nconst DeleteContainer = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  svg {\r\n    font-size: 26px;\r\n    margin: auto;\r\n  }\r\n`;\r\n\r\nconst CardContainer = styled.div`\r\n  padding: 0 0.5rem;\r\n`;\r\n\r\nconst data: any = {\r\n  baseCurrency: \"USD\"\r\n};\r\n\r\nconst CurrencyExchange: FunctionComponent<ICurrencyExchange> = () => {\r\n  const [baseValue, setBaseValue] = useState(\"10.00\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [allRates, setAllRates] = useState([]);\r\n  const [visibleRates, setVisibleRates] = useState<any>([]);\r\n  const [dropDownData, setDropDownData] = useState<any>([]);\r\n  const [newRate, setNewRate] = useState<any>(null);\r\n\r\n  const fetchData = async () => {\r\n    const base = \"USD\";\r\n    const symbols = \"CAD,IDR,GBP,CHF,SGD,INR,MYR,JPY,KRW\";\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.exchangeratesapi.io/latest?base=${base}&symbols=${symbols}`\r\n      );\r\n      const json = await response.json();\r\n      let allRatesMapped: any = [];\r\n      let dropDownMapped: any = [];\r\n      for (let currency in json.rates) {\r\n        allRatesMapped.push({\r\n          currency,\r\n          rate: json.rates[currency]\r\n        });\r\n        dropDownMapped.push({\r\n          key: currency,\r\n          value: currency,\r\n          text: currency\r\n        });\r\n      }\r\n      setAllRates(allRatesMapped);\r\n      setDropDownData(dropDownMapped);\r\n      setVisibleRates(allRatesMapped.slice(0, 4));\r\n    } catch {\r\n      console.log(\"error\");\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const onChangeValue = (event: ChangeEvent, data: any) => {\r\n    event.preventDefault();\r\n    setBaseValue(data.value);\r\n  };\r\n\r\n  const onChangeNewRate = (event: SyntheticEvent, data: any) => {\r\n    event.preventDefault();\r\n    const selectedRate = allRates.find(\r\n      (item: any) => item.currency === data.value\r\n    );\r\n    if (selectedRate) {\r\n      setNewRate(selectedRate);\r\n    }\r\n  };\r\n\r\n  const onAddRate = (event: SyntheticEvent) => {\r\n    event.preventDefault();\r\n    if (newRate != null) {\r\n      const isExist = visibleRates.find((item: any) => {\r\n        return item.currency === newRate.currency;\r\n      });\r\n      !isExist &&\r\n        newRate !== null &&\r\n        setVisibleRates([...visibleRates, newRate]);\r\n    }\r\n  };\r\n\r\n  const onDeleteRate = (event: any, index: any) => {\r\n    event.preventDefault();\r\n    let copyOfVisibleRates = visibleRates;\r\n    copyOfVisibleRates.splice(index, 1);\r\n    console.log({ copyOfVisibleRates });\r\n    setVisibleRates([...copyOfVisibleRates]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log({ visibleRates });\r\n  }, [visibleRates]);\r\n\r\n  return (\r\n    <Grid centered verticalAlign=\"middle\" columns={3}>\r\n      <Grid.Column mobile={16} tablet={8} computer={6}>\r\n        <Card fluid>\r\n          <Base\r\n            currency={data.baseCurrency}\r\n            value={baseValue}\r\n            onChange={onChangeValue}\r\n          />\r\n          <Card.Content extra>\r\n            {!loading ? (\r\n              visibleRates.map((item: any, index: any) => {\r\n                return (\r\n                  <CardContainer>\r\n                    <Grid celled>\r\n                      <Grid.Row>\r\n                        <Grid.Column width={13}>\r\n                          <Item\r\n                            key={index}\r\n                            currency={item.currency}\r\n                            rate={item.rate}\r\n                            baseCurrency={data.baseCurrency}\r\n                            baseValue={baseValue}\r\n                          />\r\n                        </Grid.Column>\r\n                        <Grid.Column width={3}>\r\n                          <DeleteContainer>\r\n                            <FaMinusCircle\r\n                              onClick={(e: any) => onDeleteRate(e, index)}\r\n                            />\r\n                          </DeleteContainer>\r\n                        </Grid.Column>\r\n                      </Grid.Row>\r\n                    </Grid>\r\n                  </CardContainer>\r\n                );\r\n              })\r\n            ) : (\r\n              <div>Loading...</div>\r\n            )}\r\n          </Card.Content>\r\n          <Card.Content extra>\r\n            <div className=\"row-between\">\r\n              <Dropdown\r\n                placeholder=\"Select currency\"\r\n                fluid\r\n                search\r\n                selection\r\n                options={dropDownData}\r\n                onChange={onChangeNewRate}\r\n              />\r\n              <Button onClick={onAddRate}>Add</Button>\r\n            </div>\r\n          </Card.Content>\r\n        </Card>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CurrencyExchange;\r\n","import React, { FunctionComponent } from \"react\";\nimport CurrencyExchange from \"./views/currency-exchange/\";\nimport \"./App.css\";\n\nconst App: FunctionComponent = () => {\n  return (\n    <div className=\"App\">\n      <CurrencyExchange />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}