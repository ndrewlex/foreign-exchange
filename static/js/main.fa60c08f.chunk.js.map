{"version":3,"sources":["views/currency-exchange/base.tsx","stores/index.tsx","utils/config.tsx","views/currency-exchange/item.tsx","views/currency-exchange/list.tsx","views/currency-exchange/action.tsx","views/currency-exchange/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Base","currency","value","onChange","Card","Content","Meta","className","Header","as","Input","size","placeholder","defaultValue","type","CurrencyContainer","createContainer","useState","baseValue","setBaseValue","allRates","setAllRates","loading","setLoading","visibleRates","setVisibleRates","dropDownData","setDropDownData","newRate","setNewRate","fetchData","a","fetchAllCurrencyRates","allCurrencyRates","map","item","key","text","slice","console","log","fetch","response","json","rates","push","rate","onAddRate","event","preventDefault","find","filterDropDownData","data","filter","includes","onChangeValue","onChangeNewRate","selectedRate","onDeleteRate","index","copyOfVisibleRates","splice","baseCurrency","onAddMoreCurrency","DeleteContainer","styled","div","Item","onDelete","Grid","celled","Row","Column","width","Intl","NumberFormat","format","code","onClick","e","CardContainer","List","useContainer","Fragment","length","extra","Action","Button","Dropdown","fluid","search","selection","options","Loading","CurrencyExchange","useEffect","centered","verticalAlign","columns","mobile","tablet","computer","App","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa60c08f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, Input, Header } from \"semantic-ui-react\";\r\n\r\nconst Base = ({ currency, value, onChange }: any) => {\r\n  return (\r\n    <Card.Content>\r\n      <Card.Meta>\r\n        <div className=\"black bold\">USD - United States Dollar</div>\r\n      </Card.Meta>\r\n      <Card.Header>\r\n        <div className=\"row-between\">\r\n          <div>\r\n            <Header as=\"h2\">{currency}</Header>\r\n          </div>\r\n          <div>\r\n            <Input\r\n              size=\"mini\"\r\n              placeholder=\"Value...\"\r\n              defaultValue={value}\r\n              onChange={onChange}\r\n              type=\"number\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </Card.Header>\r\n    </Card.Content>\r\n  );\r\n};\r\n\r\nexport default Base;\r\n","import { useState, ChangeEvent, SyntheticEvent } from \"react\";\r\nimport { createContainer } from \"unstated-next\";\r\nimport { ExchangeRatesApi } from \"../utils/config\";\r\n\r\nconst useCurrency = () => {\r\n  const baseCurrency = \"USD\";\r\n  const [baseValue, setBaseValue] = useState<any>(\"10.00\");\r\n  const [allRates, setAllRates] = useState<any>([]);\r\n  const [loading, setLoading] = useState<any>(true);\r\n  const [visibleRates, setVisibleRates] = useState<any>([]);\r\n  const [dropDownData, setDropDownData] = useState<any>([]);\r\n  const [newRate, setNewRate] = useState<any>(null);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const allCurrencyRates = await fetchAllCurrencyRates();\r\n      setAllRates(allCurrencyRates);\r\n      setDropDownData(\r\n        allCurrencyRates.map((item: any) => {\r\n          return {\r\n            key: item.currency,\r\n            value: item.currency,\r\n            text: item.currency\r\n          };\r\n        })\r\n      );\r\n      setVisibleRates(allCurrencyRates.slice(0, 4));\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const fetchAllCurrencyRates = async () => {\r\n    const symbols = \"CAD,IDR,GBP,CHF,SGD,INR,MYR,JPY,KRW\";\r\n    const response = await fetch(\r\n      `${ExchangeRatesApi}/latest?base=${baseCurrency}&symbols=${symbols}`\r\n    );\r\n    const json = await response.json();\r\n    let allCurrencyRates: any = [];\r\n    for (let currency in json.rates) {\r\n      allCurrencyRates.push({\r\n        currency,\r\n        rate: json.rates[currency]\r\n      });\r\n    }\r\n    return allCurrencyRates;\r\n  };\r\n\r\n  const onChangeValue = (event: ChangeEvent, data: any) => {\r\n    event.preventDefault();\r\n    setBaseValue(data.value);\r\n  };\r\n\r\n  const onChangeNewRate = (event: SyntheticEvent, data: any) => {\r\n    event.preventDefault();\r\n    const selectedRate = allRates.find(\r\n      (item: any) => item.currency === data.value\r\n    );\r\n    if (selectedRate) {\r\n      setNewRate(selectedRate);\r\n    }\r\n  };\r\n\r\n  const onAddRate = async (event: SyntheticEvent) => {\r\n    event.preventDefault();\r\n    const isExist = visibleRates.find((item: any) => {\r\n      return item.currency === newRate.currency;\r\n    });\r\n    if (!isExist && newRate !== null) {\r\n      setVisibleRates([...visibleRates, newRate]);\r\n      filterDropDownData([...visibleRates, newRate]);\r\n      setNewRate(null);\r\n    }\r\n  };\r\n\r\n  const onAddMoreCurrency = (event: SyntheticEvent) => {\r\n    event.preventDefault();\r\n    filterDropDownData(visibleRates);\r\n  };\r\n\r\n  const filterDropDownData = (visibleRates: any) => {\r\n    const data = allRates.filter((item: any) => !visibleRates.includes(item));\r\n    setDropDownData(\r\n      data.map((item: any) => {\r\n        return {\r\n          key: item.currency,\r\n          value: item.currency,\r\n          text: item.currency\r\n        };\r\n      })\r\n    );\r\n    setNewRate(data[0]);\r\n  };\r\n\r\n  const onDeleteRate = (event: any, index: any) => {\r\n    event.preventDefault();\r\n    let copyOfVisibleRates = visibleRates;\r\n    copyOfVisibleRates.splice(index, 1);\r\n    filterDropDownData(copyOfVisibleRates);\r\n    setVisibleRates([...copyOfVisibleRates]);\r\n    setNewRate(null);\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    baseValue,\r\n    visibleRates,\r\n    dropDownData,\r\n    fetchData,\r\n    onChangeValue,\r\n    onChangeNewRate,\r\n    onAddRate,\r\n    onDeleteRate,\r\n    baseCurrency,\r\n    newRate,\r\n    setNewRate,\r\n    onAddMoreCurrency\r\n  };\r\n};\r\n\r\nexport const CurrencyContainer = createContainer(useCurrency);\r\n","export const ExchangeRatesApi = \"https://api.exchangeratesapi.io\";\r\n","import React from \"react\";\r\nimport { Header, Grid } from \"semantic-ui-react\";\r\nimport { FaMinusCircle } from \"react-icons/fa\";\r\nimport { code } from \"currency-codes\";\r\nimport styled from \"styled-components\";\r\n\r\nconst DeleteContainer = styled.div`\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  svg {\r\n    font-size: 26px;\r\n    margin: auto;\r\n  }\r\n`;\r\n\r\nconst Item = ({\r\n  currency,\r\n  baseCurrency,\r\n  baseValue,\r\n  rate,\r\n  onDelete,\r\n  index\r\n}: any) => {\r\n  return (\r\n    <Grid celled>\r\n      <Grid.Row>\r\n        <Grid.Column width={13}>\r\n          <div className=\"row-between\">\r\n            <div>\r\n              <Header as=\"h2\">{currency}</Header>\r\n            </div>\r\n            <div>\r\n              <Header as=\"h2\">\r\n                {new Intl.NumberFormat(\"de-ID\").format(baseValue * rate)}\r\n              </Header>\r\n            </div>\r\n          </div>\r\n          <div className=\"black bold italic\">\r\n            <p>\r\n              {currency} - {code(currency).currency}\r\n            </p>\r\n          </div>\r\n          <div className=\"bold\">\r\n            <p>\r\n              1 {baseCurrency} = {currency}{\" \"}\r\n              {new Intl.NumberFormat(\"de-ID\").format(rate)}\r\n            </p>\r\n          </div>\r\n        </Grid.Column>\r\n        <Grid.Column width={3}>\r\n          <DeleteContainer>\r\n            <FaMinusCircle onClick={(e: any) => onDelete(e, index)} />\r\n          </DeleteContainer>\r\n        </Grid.Column>\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","import React from \"react\";\r\nimport { Card } from \"semantic-ui-react\";\r\nimport { CurrencyContainer } from \"../../stores/index\";\r\nimport Item from \"./item\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CardContainer = styled.div`\r\n  padding: 0 0.5rem;\r\n`;\r\n\r\nconst List = () => {\r\n  const {\r\n    baseValue,\r\n    visibleRates,\r\n    onDeleteRate,\r\n    baseCurrency\r\n  } = CurrencyContainer.useContainer();\r\n  return (\r\n    <React.Fragment>\r\n      {visibleRates.length > 0 && (\r\n        <Card.Content extra>\r\n          {visibleRates.map((item: any, index: any) => {\r\n            return (\r\n              <CardContainer key={index}>\r\n                <Item\r\n                  currency={item.currency}\r\n                  rate={item.rate}\r\n                  baseCurrency={baseCurrency}\r\n                  baseValue={baseValue}\r\n                  onDelete={(e: any) => onDeleteRate(e, index)}\r\n                />\r\n              </CardContainer>\r\n            );\r\n          })}\r\n        </Card.Content>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport { Card, Dropdown, Button } from \"semantic-ui-react\";\r\nimport { CurrencyContainer } from \"../../stores/index\";\r\n\r\nconst Action = () => {\r\n  const {\r\n    dropDownData,\r\n    onChangeNewRate,\r\n    onAddRate,\r\n    newRate,\r\n    onAddMoreCurrency\r\n  } = CurrencyContainer.useContainer();\r\n  return (\r\n    <React.Fragment>\r\n      {dropDownData.length !== 0 && (\r\n        <Card.Content extra>\r\n          {newRate === null ? (\r\n            <Button onClick={onAddMoreCurrency}>Add More Currency</Button>\r\n          ) : (\r\n            <div className=\"row-between\">\r\n              <Dropdown\r\n                placeholder=\"Select currency\"\r\n                fluid\r\n                search\r\n                selection\r\n                defaultValue={newRate.currency}\r\n                options={dropDownData}\r\n                onChange={onChangeNewRate}\r\n              />\r\n              <Button onClick={onAddRate}>Submit</Button>\r\n            </div>\r\n          )}\r\n        </Card.Content>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Action;\r\n","import React, { useEffect, FunctionComponent } from \"react\";\r\nimport { Card, Grid } from \"semantic-ui-react\";\r\nimport Base from \"./base\";\r\nimport List from \"./list\";\r\nimport Action from \"./action\";\r\nimport { CurrencyContainer } from \"../../stores/index\";\r\n\r\ninterface ICurrencyExchange {}\r\n\r\nconst Loading = () => {\r\n  return <Card.Content>Loading...</Card.Content>;\r\n};\r\nconst CurrencyExchange: FunctionComponent<ICurrencyExchange> = () => {\r\n  const {\r\n    baseValue,\r\n    fetchData,\r\n    onChangeValue,\r\n    baseCurrency,\r\n    loading\r\n  } = CurrencyContainer.useContainer();\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <Grid centered verticalAlign=\"middle\" columns={3}>\r\n      <Grid.Column mobile={16} tablet={8} computer={6}>\r\n        <Card fluid>\r\n          <Base\r\n            currency={baseCurrency}\r\n            value={baseValue}\r\n            onChange={onChangeValue}\r\n          />\r\n          {loading && <Loading />}\r\n          <React.Fragment>\r\n            <List />\r\n            <Action />\r\n          </React.Fragment>\r\n        </Card>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CurrencyExchange;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport CurrencyExchange from \"./views/currency-exchange/\";\r\nimport { CurrencyContainer } from \"./stores/index\";\r\nimport \"./App.css\";\r\n\r\nconst App: FunctionComponent = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <CurrencyContainer.Provider>\r\n        <CurrencyExchange />\r\n      </CurrencyContainer.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}